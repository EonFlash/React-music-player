{"version":3,"sources":["components/LibrarySong.js","components/Library.js","components/Player.js","components/Song.js","data.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["LibrarySong","song","className","alt","name","src","cover","artist","Library","songs","map","Player","currentSong","isPlaying","setIsPlaying","audioRef","useRef","timeUpdateHandler","e","current","target","currentTime","duration","setsongInfo","songInfo","getTime","time","Math","floor","slice","useState","onChange","value","min","max","type","size","icon","faAngleLeft","onClick","pause","play","faPause","faPlay","faAngleRight","onLoadedMetadata","onTimeUpdate","ref","audio","Song","chillHop","color","id","uuidv4","active","App","data","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70185ed7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst LibrarySong = ({ song }) => {\r\n    return (\r\n        <div className=\"library-song\">\r\n\r\n            <img alt={song.name} src={song.cover}></img>\r\n            <h3>{song.name}</h3>\r\n            <h4>{song.artist}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LibrarySong\r\n","import React from 'react'\r\nimport LibrarySong from './LibrarySong'\r\n\r\nconst Library = ({ songs }) => {\r\n    return (\r\n        <div className=\"library\">\r\n            <h2>Library</h2>\r\n            <div className=\"library-songs\">\r\n\r\n                {songs.map((song) =>\r\n\r\n                    <LibrarySong song={song} />\r\n\r\n                )}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Library\r\n","import React, { useRef, useState } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction Player({ currentSong, isPlaying, setIsPlaying }) {\r\n\r\n    //Ref\r\n    const audioRef = useRef(null);\r\n\r\n    //Event Handler\r\n    const onClickPlayHandler = () => {\r\n        if (isPlaying) {\r\n            audioRef.current.pause();\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n        else {\r\n            audioRef.current.play();\r\n            setIsPlaying(!isPlaying);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    const timeUpdateHandler = (e) => {\r\n\r\n        const current = e.target.currentTime;\r\n\r\n        const duration = e.target.duration;\r\n\r\n        setsongInfo({ ...songInfo, currentTime: current, duration: duration });\r\n\r\n    };\r\n\r\n    const getTime = (time) => {\r\n\r\n        return (\r\n            Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n        )\r\n\r\n    }\r\n    const dragHandler = (e) => {\r\n\r\n        audioRef.current.currentTime = e.target.value\r\n        setsongInfo({ ...songInfo, currentTime: e.target.value })\r\n\r\n    }\r\n\r\n    //State\r\n    const [songInfo, setsongInfo] = useState({\r\n\r\n        currentTime: 0,\r\n        duration: 0,\r\n    });\r\n    return (\r\n        <div className=\"player\">\r\n            <div className=\"time-control\">\r\n                <p>{getTime(songInfo.currentTime)}</p>\r\n                <input onChange={dragHandler} min={0} max={songInfo.duration} value={songInfo.currentTime} type=\"range\" />\r\n                <p>{getTime(songInfo.duration)}</p>\r\n            </div>\r\n\r\n\r\n            <div className=\"play-control\">\r\n\r\n                <FontAwesomeIcon className=\"skip-back\" size=\"2x\" icon={faAngleLeft} />\r\n                <FontAwesomeIcon onClick={onClickPlayHandler} className=\"play\" size=\"2x\" icon={isPlaying ? faPause : faPlay} />\r\n                <FontAwesomeIcon className=\"skip-forward\" size=\"2x\" icon={faAngleRight} />\r\n            </div>\r\n\r\n            <audio onLoadedMetadata={timeUpdateHandler} onTimeUpdate={timeUpdateHandler} ref={audioRef} src={currentSong.audio}></audio>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Player\r\n","import React from 'react'\r\n\r\nconst Song = ({ currentSong }) => {\r\n    return (\r\n        <div className=\"song-container\">\r\n            <img alt={currentSong.name} src={currentSong.cover}></img>\r\n            <h2>{currentSong.name}</h2>\r\n            <h3>{currentSong.artist}</h3>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Song\r\n","\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nfunction chillHop() {\r\n    return [\r\n        {\r\n            name: \"Beaver Creek\",\r\n            cover:\r\n                \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\r\n            artist: \"Aso, Middle School, Aviino\",\r\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=10075\",\r\n            color: [\"#205950\", \"#2ab3bf\"],\r\n            id: uuidv4(),\r\n            active: true,\r\n        },\r\n        {\r\n            name: \"Daylight\",\r\n            cover:\r\n                \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\r\n            artist: \"Aiguille\",\r\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=9272\",\r\n            color: [\"#EF8EA9\", \"#ab417f\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n        },\r\n        {\r\n            name: \"Keep Going\",\r\n            cover:\r\n                \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\r\n            artist: \"Swørn\",\r\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=9222\",\r\n            color: [\"#CD607D\", \"#c94043\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n        },\r\n        {\r\n            name: \"Nightfall\",\r\n            cover:\r\n                \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\r\n            artist: \"Aiguille\",\r\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=9148\",\r\n            color: [\"#EF8EA9\", \"#ab417f\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n        },\r\n        {\r\n            name: \"Reflection\",\r\n            cover:\r\n                \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\r\n            artist: \"Swørn\",\r\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=9228\",\r\n            color: [\"#CD607D\", \"#c94043\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n        },\r\n        {\r\n            name: \"Under the City Stars\",\r\n            cover:\r\n                \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\r\n            artist: \"Aso, Middle School, Aviino\",\r\n            audio: \"https://mp3.chillhop.com/serve.php/?mp3=10074\",\r\n            color: [\"#205950\", \"#2ab3bf\"],\r\n            id: uuidv4(),\r\n            active: false,\r\n        },\r\n        //ADD MORE HERE\r\n    ];\r\n}\r\n\r\nexport default chillHop;\r\n","import React, { useState } from 'react';\n\n//Adding styles\nimport './styles/app.scss';\n\n//Adding components\nimport Library from './components/Library';\nimport Player from './components/Player';\nimport Song from './components/Song';\n\n//Importing Data\nimport data from './data';\n\n\n\nfunction App() {\n  //State\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <Song currentSong={currentSong} />\n      <Player isPlaying={isPlaying} setIsPlaying={setIsPlaying} currentSong={currentSong} />\n      <Library songs={songs} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}